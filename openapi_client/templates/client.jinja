import json
import warnings
from typing import Any, Optional, Union

import httpx


class {{ CLIENT }}(httpx.Client):
    """{{ document.info.title }}

    version {{ document.info.version }}
    {% if document.info.description %}{{ document.info.description }}{% endif %}
    {% if document.info.termsOfService -%}
    Terms of services
    {{ document.info.termsOfService }}
    {%- endif %}
    {% if document.info.contact -%}
    Contact
    -------
    {{ document.info.contact.name }} {{ document.info.contact.email }}
    {{ document.info.contact.url }}
    {%- endif -%}
    {% if document.info.license -%}
    License
    -------
    {{ document.info.license.name }}
    {{ document.info.license.url }}
    {%- endif -%}
    """

    def __init__(self, url: str, username: Optional[str] = None, password: Optional[str] = None):
        """
        Parameters
        ----------
        url
            server's URL
        """
        super().__init__()
        self.url = url
        self.version = '{{ document.info.version }}'

        self._credentials_are_set = False

        if username and password:
            self.setup_credentials(username, password)

    def setup_credentials(self, username: str, password: str) -> None:
        """Set credentials needed for HTTP requests"""
        self._auth = httpx.BasicAuth(username, password)

    def _get(self, route: str, params: dict = None, headers: dict = None, return_as_bytes: bool = False) -> Union[list, dict, str, bytes, int]:
        """GET request with specified route
        Parameters
        ----------
        route
            HTTP route.
        params
            Parameters for the HTTP request.
        headers
            Headers for the HTTP request.
        return_as_bytes
            If True, returns the content as bytes.

        Returns
        -------
        Union[list, dict, str, bytes, int]
            Response of the HTTP GET request converted to json format.
        """
        response = self.get(url=route, params=params, headers=headers)

        if 200 <= response.status_code < 300:
            if 'application/json' in response.headers['content-type']:
                return response.json()
            elif 'text/plain' in response.headers['content-type']:
                return response.text
            else:
                return response.content

        raise httpx.HTTPError(f'HTTP code: {response.status_code}, with content: {response.text}')

    def _delete(self, route: str) -> bool:
        """DELETE to specified route
        Parameters
        ----------
        route
            HTTP route.
        Returns
        -------
        bool
            True if the HTTP DELETE request succeeded (HTTP code 200).
        """
        response = self.delete(route)

        if 200 <= response.status_code < 300:
            if 'application/json' in response.headers['content-type']:
                return response.json()
            elif 'text/plain' in response.headers['content-type']:
                return response.text
            else:
                return response.content

        if response.status_code == 200:
            return True

        if response.status_code == 404:
            return False

        raise httpx.HTTPError(f'HTTP code: {response.status_code}, with content: {response.text}')

    def _post(self, route: str,
              data: Optional[Union[dict, str, int, bytes]] = None,
              return_as_bytes: bool = False) -> Any:
        """POST to specified route
        Parameters
        ----------
        route
            HTTP route.
        data
            Dictionary to send in the body of request.
        return_as_bytes
            If True, returns the content as bytes.
        Returns
        -------
        Union[Dict, str, bytes, int]
            Response of the HTTP POST request converted to json format.
        """
        if type(data) != bytes:
            data = json.dumps(data)

        response = self.post(route, data=data)  # type: ignore

        if response.status_code == 200:
            if return_as_bytes:
                return response.content

            try:
                return response.json()

            except ValueError:
                return response.content

        raise httpx.HTTPError(f'HTTP code: {response.status_code}, with text: {response.text}')

    def _put(self, route: str, data: Optional[Union[dict, str, int, bytes]] = None) -> None:
        """PUT to specified route
        Parameters
        ----------
        route
            HTTP route.
        data
            Dictionary to send in the body of request.
        Returns
        -------
        None
            Nothing, raise if a problem occurs.
        """
        response = self.put(route, data=data)

        if response.status_code == 200:
            return

        raise httpx.HTTPError(f'HTTP code: {response.status_code}, with text: {response.text}')