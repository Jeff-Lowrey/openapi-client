    def {{ FUNCTION_NAME }}(
            self,
            {% if FUNCTION_PARAMETERS %}{% for param in FUNCTION_PARAMETERS %}{{ param }},
            {% endfor -%}
            {%- endif -%}
            {%- if METHOD in ['put', 'post'] -%}
            content: RequestContent = None,
            data: RequestData = None,
            files: RequestFiles = None,
            json: Any = None,
            {% endif -%}
            params: QueryParamTypes = None,
            headers: HeaderTypes = None,
            cookies: CookieTypes = None) -> {% if METHOD not in ['delete', 'put'] %}Union[list, dict, str, bytes, int]{% else %}None{% endif %}:
        """{{ OPERATION.summary }}

        {{ OPERATION.description }}
        Tags: {{ ','.join(OPERATION.tags) }}
        {%- if OPERATION.externalDocs %}ExternaDocs: {{ OPERATION.externalDocs }}{% endif %}

        Parameters
        ----------
        {% for param in OPERATION.parameters -%}
        {% if param.in_ == 'path' -%}
        {{ param.name.replace('id', 'id_') }}
            {{ param.description }}
        {% endif %}
        {%- endfor -%}
        {%- if METHOD in ['put','post'] %}content
            Binary data.
        data
            Non-nested dictionary.
        files
            File object (ex. `{'upload-file': open('rtdose.dcm', 'rb')}`).
        json
            For complex/nested dictionary data.
        {% endif -%}
        params
            Dictionary of optional parameters:
        {%- for param in OPERATION.parameters -%}
        {%- if param.in_ == 'query' %}
            {{ param.name }} ({{ TYPES[param.schema.type] }}): {{ param.description }}
        {%- endif %}
        {%- endfor %}
        headers
            Dictionary of optional headers:
        {%- for param in OPERATION.parameters -%}
        {% if param.in_ == 'header' %}
            {{ param.name }} ({{ TYPES[param.schema.type] }}): {{ param.description }}
        {%- endif %}
        {%- endfor %}
        cookies
            Cookies in the request.

        Returns
        -------
        Union[list, dict, str, bytes, int]
        {%- for response in RESPONSES %}
            {{ response.description }}
        {%- endfor %}
        """
        {% if OPERATION.deprecated %}warnings.warn('This method is deprecated.', DeprecationWarning, stacklevel=2)

        {% endif -%}
        return self._{{ METHOD }}(
            route=f'{self.url}{{ ROUTE }}',
            {% if METHOD in ['put', 'post'] %}content=content,
            data=data,
            files=files,
            json=json,
            {% endif -%}
            params=params,
            headers=headers,
            cookies=cookies
        )
